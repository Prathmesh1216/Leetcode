class Solution {
public:
    int n;
    int findPar(int node,vector<int>& parent){
        if(parent[node]==node) return node;
        return parent[node] = findPar(parent[node],parent);
    }
    void unionbs(int u,int v,vector<int>& size,vector<int>& parent){
        u = findPar(u,parent);
        v = findPar(v,parent);
        if(u==v) return;
        if(size[u]<size[v]){
            parent[u] = v;
            size[v]+=size[u];
        }
        else{
            parent[v] = u;
            size[u] += size[v];
        }
    }
    int solve(int node,vector<vector<int>>& graph,vector<int>& initial){
        vector<int> parent,size;
        parent.resize(n+1);
        size.resize(n+1,1);
        for(int i = 1;i<=n;i++) parent[i] = i;
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                if(i!=node && j!=node && graph[i][j]) unionbs(i,j,size,parent);
            }
        }
        // for(auto& it : size) cout << it << " ";
        // cout << endl; 
        vector<int> vis(n+1);
        int ans = 0;
        for(int i = 0;i<initial.size();i++){
            if(initial[i]==node) continue;
            int par = findPar(initial[i],parent);
            if(!vis[par]) vis[par] = 1,ans += size[par];
        }
        return ans;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        n = graph.size();
        int ans = 123456789;
        int idx = -1;
        for(int i = 0;i<initial.size();i++){
            int a = solve(initial[i],graph,initial);
            if(a<ans) ans = a,idx = initial[i];
            else if(a==ans) idx = min(idx,initial[i]);
        }
        return idx;
    }
};